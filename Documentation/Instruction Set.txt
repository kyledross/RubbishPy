Rubbish Instruction Set, Compiler Meta-commands, and Pointers
--------------------------------------------------------------

About labels
When referencing a label, classic syntax is to use a colon prefix.
This behavior has been relaxed, and the colon prefix in the reference is no longer required.
For example, CALL :labelAddress and CALL labelAddress are both valid.

=======================================================
-- Register and memory instructions

Load Register
LR reg value

Load Register from Register
LRR reg_to reg_from
Opcode:3

Load Register from Memory
LRM reg address
LRM reg :labelAddress
LRM reg labelAddress
LRM reg @registerAddress
Opcode:2

Move Register to Memory
MRM reg address
MRM reg :labelAddress
MRM reg labelAddress
MRM reg @registerAddress
Opcode:4

Increment Register
INC reg
Opcode: 27


=======================================================
-- Stack instructions

Push Register Onto Common Stack
PUSH reg
Opcode: 18

Pop Off Of Common Stack (into register)
POP reg
Opcode: 19

Peek At Top Of Common Stack (into register)
PEEK reg
Opcode: 34

=======================================================
-- Integer math instructions

Add Registers 1 and 2 (Result stored in Register 3)
ADD
Opcode:5

Divide Register 1 by register 2 (Quotient stored in Register 3, remainder stored in register 4)
DIV
Opcode:8

Multiply Registers 1 and 2 (Result stored in Register 3)
MUL
Opcode:7

Subtract Registers 1 and 2 (Result stored in Register 3)
SUB
Opcode:6

=======================================================
-- Logic instructions

Or (Or register 1 and 2, result into register 3)
Or
Opcode: 23

And (And register 1 and 2, result into register 3)
And
Opcode: 24

Xor (Xor register 1 and 2, result into register 3)
Xor
Opcode: 25

Not (Not register 1, result into register 3)
Not
Opcode: 22

=======================================================
-- Evaluation and branching

Jump to Address
JMP address
JMP :labelAddress
JMP labelAddress
Opcode:11

Compare Register 1 to 2
CMP
Opcode:13
Note: CMP isn't required anymore. The processor triggers an automatic compare whenever registers 1 or 2 change.
The compiler will skip CMP if it is found.

Jump if Equal
JE address
JE :labelAddress
JE labelAddress
Opcode:14

Jump not Equal
JNE address
JNE :labelAddress
JNE labelAddress
Opcode:15

Jump if Less-than
JL address
JL :labelAddress
JL labelAddress
Opcode:16

Jump if Greater-than
JG address
JG :labelAddress
JG labelAddress
Opcode:17

Set Interrupt Vector
SIV interrupt address
SIV interrupt :labelAddress
SIV interrupt labelAddress
Opcode: 26
Purpose: When the interrupt occurs, the current instruction pointer is pushed into an instruction pointer cache and processor jumps to the address.

Call code
CALL address
CALL :labelAddress
CALL labelAddress
Opcode: 20
Purpose: Pushes current instruction pointer into an instruction pointer stack, pushes all general purpose registers into a register stack, and jumps to the address.

Return
RETURN
Opcode: 21
Purpose: Pops instruction pointer off instruction pointer stack, pops general purpose registers off of the register stack, and continues executing at the next address.

Raise Interrupt
INT interrupt bitmap (1, 2, 4, 8, 16 etc)
Opcode: 31
Purpose: Raises the designated interrupt on the interrupt bus

=======================================================
-- Processor control

Halt Processor
HALT
Opcode:9

Debug
DEBUG
Opcode:10

Reset Processor (not supported by Rubbish Processor)
RST

Sleep
SLEEP
Opcode: 28
Purpose: Causes processor to remain in a state where no instructions are processed until an interrupt is handled.  The processor will return to sleep after an RTN.

Wake
WAKE
Opcode: 29
Purpose: Causes processor to resume processing instructions. Cancels any previous SLEEP instruction.  Typically found in the code of an interrupt vector, as it can't be reached in any other fashion if the processor is already asleep from a prior SLEEP instruction.

ASSERT_EMPTY_USER_STACK
Opcode: 35
Purpose: As a debugging measure, when the processor encounters this instruction, if the user-stack is not empty, an exception will be raised.


=======================================================
Compiler Meta-commands

labelname:
Purpose: Represents an address in the compiled code.  Typically used as an address for jumps and interrupt vectors as well as for locating data in the program.
Example: someLabel:

DATA string
Purpose: Directly inserts the string as values into the compiled program. Typically used with a label so that the data can be located.  Supports \r, \n, and \0 for carriage returns, line feeds, and ASCII NUL.
Example: someLabel: DATA This is a string.\r\n\0

Include pathname
Purpose: Includes the contents of the file designated by the pathname at this location
Example: Include ../Programs/file_to_include.txt

'
Purpose: Comment in code.  These lines are not compiled.
Example: ' This is a comment

=======================================================
Pointers

:labelAddress pointer (leading colon is deprecated, use colon-less label pointer)
labelAddress pointer
Purpose: Represents the address where the label is found.
Example: LRM 4 :someLabel   - deprecated... use colon-less label pointer below
Example: LRM 4 someLabel    - would move the value located at the specified label into register 4
Any instruction that takes an address as a parameter can use the labelAddress pointer

@register pointer
Purpose: Represents an address of a value to use.  Typically used to load a value from memory whose address is in a register.
Example:  LRM 2 @4    - would load the value at the address located in register 4 into register 2
The @register pointer can only be used with certain instructions (see the instruction's information for details)
