' Copyright 2024 Kyle D. Ross
' For licensing information, see LICENSE.txt


' Processor test

' Requirements:
' RAM at address 0, size of 2048

' How to use:

' 1. Load register 0 with step number.
' 2. Perform test.
' 3. If out-of-spec, jump to :problem.
' 4. At end of the last test, set register 0 to -69 and execute DEBUG instruction to indicate successful run of all tests.
' 5. If register 0 is not -69, then the test that set register 0 to its current value has failed in some fashion.
' 6. Each test should be self-contained and not rely upon the state of any previous test.
' 7. If scratch memory is needed, use addresses >= 1024. Anything before that should be considered program memory.

' LR
begin_test:LR 0 1
LR 1 69
LR 2 69
CMP
JNE :problem

' CMP/JE
LR 0 2
LR 1 0
LR 2 0
LR 3 0
LR 1 69
LR 2 69
CMP
JE :cmp_je_ok
JMP :problem
cmp_je_ok: nop

' JNE
LR 0 3
LR 1 0
LR 2 0
LR 3 0
LR 1 69
LR 2 68
CMP
JNE :jne_ok
JMP :problem
jne_ok: nop

' JG
LR 0 4
LR 1 0
LR 2 0
LR 3 0
LR 1 70
LR 2 69
CMP
JG :jg_ok
JMP :problem
jg_ok: nop

' JL
LR 0 5
LR 1 0
LR 2 0
LR 3 0
LR 1 68
LR 2 69
CMP
JL :jl_ok
JMP :problem
jl_ok: nop

' ADD/LRR
LR 0 6
LR 1 0
LR 2 0
LR 3 0
LR 1 1
LR 2 2
ADD
LRR 1 3
LR 2 3
CMP
JE :add_ok
JMP :problem
add_ok: nop

' SUB
LR 0 7
LR 1 0
LR 2 0
LR 3 0
LR 1 3
LR 2 2
SUB
LRR 1 3
LR 2 1
CMP
JE :sub_ok
JMP :problem
sub_ok: nop

' MUL
LR 0 8
LR 1 0
LR 2 0
LR 3 0
LR 1 2
LR 2 3
MUL
LRR 1 3
LR 2 6
CMP
JE :mul_ok
JMP :problem
mul_ok: nop

' DIV
LR 0 9
LR 1 0
LR 2 0
LR 3 0
LR 1 6
LR 2 3
DIV
LRR 1 3
LR 2 2
CMP
JE :div_ok
JMP :problem
div_ok: nop

' MRM/LRM
LR 0 10
LR 1 0
LR 2 0
LR 3 0
LR 1 69
MRM 1 1024
LRM 2 1024
CMP
JE :mrm_ok
JMP :problem
mrm_ok: nop

' PUSH/POP
LR 0 11
LR 1 0
LR 2 0
LR 3 0
LR 1 69
PUSH 1
POP 2
CMP
JE :push_okay
JMP :problem
push_okay: nop

' CALL/RTN test call was actually made
' This test writes a value to memory during the call, which is checked upon return.
' This proves the call was actually made
'
LR 0 12
LR 1 0
LR 2 0
LR 3 0
MRM 1 1024
CALL :test_call_was_made
LR 1 69
LRM 2 1024
CMP
JE :test_call_was_made_okay
JMP :problem
test_call_was_made: LR 3 69
MRM 3 1024
RTN
test_call_was_made_okay: nop

' CALL/RTN test push and pop registers
' This test shows that the registers are pushed upon CALL and popped upon RTN to prove pop and push registers works
LR 0 13
LR 1 0
LR 2 0
LR 3 0
LR 1 69
LR 2 0
CALL :test_call_push_and_pop
LR 2 69
CMP
JE :call_push_and_pop_okay
JMP :problem
test_call_push_and_pop: LR 1 68
RTN
call_push_and_pop_okay: nop

' OR
LR 0 14
LR 1 0
LR 2 0
LR 3 0
LR 1 1
LR 2 2
OR
LRR 1 3
LR 2 3
CMP
JE :or_ok
JMP :problem
or_ok: nop

' AND
LR 0 15
LR 1 0
LR 2 0
LR 3 0
LR 1 3
LR 2 2
AND
LRR 1 3
LR 2 2
CMP
JE :and_ok
JMP :problem
and_ok: nop

' XOR
LR 0 16
LR 1 0
LR 2 0
LR 3 0
LR 1 3
LR 2 2
XOR
LRR 1 3
LR 2 1
CMP
JE :xor_ok
JMP :problem
xor_ok: nop

' NOT
LR 0 17
LR 1 0
LR 2 0
LR 3 0
LR 1 1
NOT
LRR 1 3
LR 2 -2
CMP
JE :not_ok
JMP :problem
not_ok: nop


finish: lr 0 -69
debug

problem: debug
