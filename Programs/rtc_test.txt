' Real-time clock test
' Pre-requisites:
' Compiler at address 0
' Processor
' RTC at 1024

' Usage:
' python3 main.py --compiler address=0 size=1024 program=../Programs/rtc_test.txt --rtc address=2048 interrupt=7 --console width=80 height=25 address=1024 interrupt=2 --ram address=4096 size=1024 --processor

' set UTC
LR 1 -5
MRM 1 2048

' set interrupt vector
SIV 7 clock_tick
sleep

' String constants
month_str: data Month: \0
day_str: data Day: \0
year_str: data Year: \0
time_str: data Time: \0
colon: data :\0
space: data  \0
newline: data \n\0

clock_tick:

' Print month
lr 3 month_str
call print_loop
lrm 7 2051
call print_number
lr 3 space
call print_loop

' Print day
lr 3 day_str
call print_loop
lrm 7 2052
call print_number
lr 3 space
call print_loop

' Print year
lr 3 year_str
call print_loop
lrm 7 2050
call print_number
lr 3 newline
call print_loop

' Print time (hour:minute:second)
lr 3 time_str
call print_loop
lrm 7 2053
call print_time_number
lr 3 colon
call print_loop
lrm 7 2054
call print_time_number
lr 3 colon
call print_loop
lrm 7 2055
call print_time_number
lr 3 newline
call print_loop
rtn

' Print a number in register 7
print_number:
' Save original value
lrr 8 7

' Check if number is >= 1000 (for year)
lr 1 1000
lrr 2 7
cmp
jl skip_thousands

' Print thousands digit
lr 1 1000
div
lr 1 48
add
mrm 1 1024
lr 1 1000
mul
lrr 2 7
sub
lrr 7 2

skip_thousands:
' Check if number is >= 100
lr 1 100
lrr 2 7
cmp
jl skip_hundreds

' Print hundreds digit
lr 1 100
div
lr 1 48
add
mrm 1 1024
lr 1 100
mul
lrr 2 7
sub
lrr 7 2

skip_hundreds:
' Check if number is >= 10
lr 1 10
lrr 2 7
cmp
jl skip_tens

' Print tens digit
lr 1 10
div
lr 1 48
add
mrm 1 1024
lr 1 10
mul
lrr 2 7
sub
lrr 7 2

skip_tens:
' Print ones digit
lr 1 48
lrr 2 7
add
mrm 1 1024

' Restore original value
lrr 7 8
rtn

' Print a time number (always 2 digits) in register 7
print_time_number:
' Save original value
lrr 8 7

' Check if number is >= 10
lr 1 10
lrr 2 7
cmp
jg skip_leading_zero
je skip_leading_zero

' Print leading zero
' ASCII '0'
lr 1 48
mrm 1 1024

skip_leading_zero:
' Print the number (1 or 2 digits)
lrr 7 8
call print_number
rtn

' Print loop from text_output_routines.txt
print_loop: LRM 4 @3
LR 1 0
LRR 2 4
CMP
JE print_return
MRM 4 1024
LR 1 1
LRR 2 3
ADD
JMP print_loop
print_return: rtn
