' Console typewriter example
' Pre-requisites:
' Compiler at address 0
' Processor
' I/O Console at address 1024, interrupt 2

' Usage:
' python3 main.py --compiler address=0 size=1024 program=../Programs/typewriter.txt --processor --console width=80 height=25 address=1024 interrupt=2 --soundcard address=1025

' =======================================
' Play startup sound
call play_startup_sound

' =======================================
' Display title
lr 3 title
call print_loop

' =======================================
' Entry point
' =======================================
' Set interrupt vector for console keypress (IRQ 2)
siv 2 keypress
' Put processor to sleep to wait for IRQ
main: sleep
' If the processor is ever taken out of sleep and control returns here, jump back to
' main and put the processor to sleep, again.  This will only happen if there is a
' WAKE instruction where there shouldn't be.
jmp main

' =======================================
' Keypress handler
' =======================================
' Handle IRQ
' Load value at 1024 (the console) into register 1
keypress:
call play_click
lrm 1 1024
' Load CR into register 2
lr 2 13
' Compare registers 1 and 2
cmp
' If equal, the user typed CR, so jump to the "next line" routine
je CR
' Otherwise, send the value in register 1 back to the console (address 1024) to be printed.
mrm 1 1024
' Return from the interrupt handler
rtn

' =======================================
' Next Line routine
' =======================================
' Send a 13 (CR) then a 10 (LF) to the console (address 1024), then return from the interrupt handler
CR:
lr 3 13
mrm 3 1024
lr 3 10
mrm 3 1024
rtn

' =======================================
' Title data
' =======================================
title: data Typewriter example\r\n
data (c) 2024 Kyle D. Ross\r\n
data \r\n
data This program will echo the characters you type to the console.\r\n
data To end the program, close this window.\r\n\r\n\0

' =======================================
' Print loop
' Usage: Load register 3 with the address of the string to print, then call print_loop
' The string should terminate with ASCII 0.
' Example:
' lr 3 title
' call print_loop
' =======================================
print_loop: LRM 4 @3
LR 1 0
LRR 2 4
CMP
JE print_return
MRM 4 1024
LR 1 1
LRR 2 3
ADD
JMP print_loop
print_return: rtn

' =======================================
' Sound

play_click:
lr 1 10
mrm 1 1025

' frequency of 1000 Hz'
lr 1 100000
mrm 1 1025

call send_volume
call end_frame
call end_transaction

rtn

play_startup_sound:
start_frame:
call send_duration
call send_c
call send_volume
call end_frame

call send_duration
call send_d
call send_volume
call end_frame

call send_duration
call send_e
call send_volume
call end_frame

' send harmony of C and E'
call send_duration
call send_c
call send_volume
call send_e
call send_volume
call end_frame
call end_transaction
rtn

send_duration:
' first byte of frame is the duration in milliseconds'
lr 1 250
mrm 1 1025
rtn

send_c:
' second byte of frame is the frequency in Hz packed * 100
lr 1 26163
mrm 1 1025
rtn

send_volume:
' third byte of frame is the volume 0-1 packed * 10
' full volume = 1 * 10'
lr 1 10
mrm 1 1025
rtn

end_frame:
' end frame with zero
lr 1 -1
mrm 1 1025
rtn

end_transaction:
lr 1 -2
mrm 1 1025
rtn

send_d:
lr 1 29366
mrm 1 1025
rtn

send_e:
lr 1 32963
mrm 1 1025
rtn


